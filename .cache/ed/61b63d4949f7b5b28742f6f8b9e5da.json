{"id":"node_modules/crypt/crypt.js","dependencies":[{"name":"C:\\Users\\Administrator\\Desktop\\resume-jq-master\\package.json","includedInParent":true,"mtime":1542805068504},{"name":"C:\\Users\\Administrator\\Desktop\\resume-jq-master\\node_modules\\crypt\\package.json","includedInParent":true,"mtime":1542804869649}],"generated":{"js":"(function() {\n  var base64map\n      = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n\n  crypt = {\n    // Bit-wise rotation left\n    rotl: function(n, b) {\n      return (n << b) | (n >>> (32 - b));\n    },\n\n    // Bit-wise rotation right\n    rotr: function(n, b) {\n      return (n << (32 - b)) | (n >>> b);\n    },\n\n    // Swap big-endian to little-endian and vice versa\n    endian: function(n) {\n      // If number given, swap endian\n      if (n.constructor == Number) {\n        return crypt.rotl(n, 8) & 0x00FF00FF | crypt.rotl(n, 24) & 0xFF00FF00;\n      }\n\n      // Else, assume array and swap all items\n      for (var i = 0; i < n.length; i++)\n        n[i] = crypt.endian(n[i]);\n      return n;\n    },\n\n    // Generate an array of any length of random bytes\n    randomBytes: function(n) {\n      for (var bytes = []; n > 0; n--)\n        bytes.push(Math.floor(Math.random() * 256));\n      return bytes;\n    },\n\n    // Convert a byte array to big-endian 32-bit words\n    bytesToWords: function(bytes) {\n      for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)\n        words[b >>> 5] |= bytes[i] << (24 - b % 32);\n      return words;\n    },\n\n    // Convert big-endian 32-bit words to a byte array\n    wordsToBytes: function(words) {\n      for (var bytes = [], b = 0; b < words.length * 32; b += 8)\n        bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);\n      return bytes;\n    },\n\n    // Convert a byte array to a hex string\n    bytesToHex: function(bytes) {\n      for (var hex = [], i = 0; i < bytes.length; i++) {\n        hex.push((bytes[i] >>> 4).toString(16));\n        hex.push((bytes[i] & 0xF).toString(16));\n      }\n      return hex.join('');\n    },\n\n    // Convert a hex string to a byte array\n    hexToBytes: function(hex) {\n      for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n      return bytes;\n    },\n\n    // Convert a byte array to a base-64 string\n    bytesToBase64: function(bytes) {\n      for (var base64 = [], i = 0; i < bytes.length; i += 3) {\n        var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];\n        for (var j = 0; j < 4; j++)\n          if (i * 8 + j * 6 <= bytes.length * 8)\n            base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));\n          else\n            base64.push('=');\n      }\n      return base64.join('');\n    },\n\n    // Convert a base-64 string to a byte array\n    base64ToBytes: function(base64) {\n      // Remove non-base-64 characters\n      base64 = base64.replace(/[^A-Z0-9+\\/]/ig, '');\n\n      for (var bytes = [], i = 0, imod4 = 0; i < base64.length;\n          imod4 = ++i % 4) {\n        if (imod4 == 0) continue;\n        bytes.push(((base64map.indexOf(base64.charAt(i - 1))\n            & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2))\n            | (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));\n      }\n      return bytes;\n    }\n  };\n\n  module.exports = crypt;\n})();\n","map":{"mappings":[{"source":"node_modules/crypt/crypt.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/crypt/crypt.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}}],"sources":{"node_modules/crypt/crypt.js":"(function() {\n  var base64map\n      = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n\n  crypt = {\n    // Bit-wise rotation left\n    rotl: function(n, b) {\n      return (n << b) | (n >>> (32 - b));\n    },\n\n    // Bit-wise rotation right\n    rotr: function(n, b) {\n      return (n << (32 - b)) | (n >>> b);\n    },\n\n    // Swap big-endian to little-endian and vice versa\n    endian: function(n) {\n      // If number given, swap endian\n      if (n.constructor == Number) {\n        return crypt.rotl(n, 8) & 0x00FF00FF | crypt.rotl(n, 24) & 0xFF00FF00;\n      }\n\n      // Else, assume array and swap all items\n      for (var i = 0; i < n.length; i++)\n        n[i] = crypt.endian(n[i]);\n      return n;\n    },\n\n    // Generate an array of any length of random bytes\n    randomBytes: function(n) {\n      for (var bytes = []; n > 0; n--)\n        bytes.push(Math.floor(Math.random() * 256));\n      return bytes;\n    },\n\n    // Convert a byte array to big-endian 32-bit words\n    bytesToWords: function(bytes) {\n      for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)\n        words[b >>> 5] |= bytes[i] << (24 - b % 32);\n      return words;\n    },\n\n    // Convert big-endian 32-bit words to a byte array\n    wordsToBytes: function(words) {\n      for (var bytes = [], b = 0; b < words.length * 32; b += 8)\n        bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);\n      return bytes;\n    },\n\n    // Convert a byte array to a hex string\n    bytesToHex: function(bytes) {\n      for (var hex = [], i = 0; i < bytes.length; i++) {\n        hex.push((bytes[i] >>> 4).toString(16));\n        hex.push((bytes[i] & 0xF).toString(16));\n      }\n      return hex.join('');\n    },\n\n    // Convert a hex string to a byte array\n    hexToBytes: function(hex) {\n      for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n      return bytes;\n    },\n\n    // Convert a byte array to a base-64 string\n    bytesToBase64: function(bytes) {\n      for (var base64 = [], i = 0; i < bytes.length; i += 3) {\n        var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];\n        for (var j = 0; j < 4; j++)\n          if (i * 8 + j * 6 <= bytes.length * 8)\n            base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));\n          else\n            base64.push('=');\n      }\n      return base64.join('');\n    },\n\n    // Convert a base-64 string to a byte array\n    base64ToBytes: function(base64) {\n      // Remove non-base-64 characters\n      base64 = base64.replace(/[^A-Z0-9+\\/]/ig, '');\n\n      for (var bytes = [], i = 0, imod4 = 0; i < base64.length;\n          imod4 = ++i % 4) {\n        if (imod4 == 0) continue;\n        bytes.push(((base64map.indexOf(base64.charAt(i - 1))\n            & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2))\n            | (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));\n      }\n      return bytes;\n    }\n  };\n\n  module.exports = crypt;\n})();\n"},"lineCount":97}},"hash":"a1cbfdfd472726adc049eb84715200c5","cacheData":{"env":{}}}