{"id":"node_modules/leancloud-storage/dist/node/geopoint.js","dependencies":[{"name":"C:\\Users\\Administrator\\Desktop\\resume-jq-master\\package.json","includedInParent":true,"mtime":1542805068504},{"name":"C:\\Users\\Administrator\\Desktop\\resume-jq-master\\node_modules\\leancloud-storage\\package.json","includedInParent":true,"mtime":1542804871007},{"name":"underscore","loc":{"line":3,"column":16},"parent":"C:\\Users\\Administrator\\Desktop\\resume-jq-master\\node_modules\\leancloud-storage\\dist\\node\\geopoint.js","resolved":"C:\\Users\\Administrator\\Desktop\\resume-jq-master\\node_modules\\underscore\\underscore.js"},{"name":"./promise","loc":{"line":4,"column":22},"parent":"C:\\Users\\Administrator\\Desktop\\resume-jq-master\\node_modules\\leancloud-storage\\dist\\node\\geopoint.js","resolved":"C:\\Users\\Administrator\\Desktop\\resume-jq-master\\node_modules\\leancloud-storage\\dist\\node\\promise.js"}],"generated":{"js":"'use strict';\n\nvar _ = require('underscore');\nvar Promise = require('./promise');\n\n/*global navigator: false */\nmodule.exports = function (AV) {\n  /**\n   * Creates a new GeoPoint with any of the following forms:<br>\n   * @example\n   * new GeoPoint(otherGeoPoint)\n   * new GeoPoint(30, 30)\n   * new GeoPoint([30, 30])\n   * new GeoPoint({latitude: 30, longitude: 30})\n   * new GeoPoint()  // defaults to (0, 0)\n   * @class\n   *\n   * <p>Represents a latitude / longitude point that may be associated\n   * with a key in a AVObject or used as a reference point for geo queries.\n   * This allows proximity-based queries on the key.</p>\n   *\n   * <p>Only one key in a class may contain a GeoPoint.</p>\n   *\n   * <p>Example:<pre>\n   *   var point = new AV.GeoPoint(30.0, -20.0);\n   *   var object = new AV.Object(\"PlaceObject\");\n   *   object.set(\"location\", point);\n   *   object.save();</pre></p>\n   */\n  AV.GeoPoint = function (arg1, arg2) {\n    if (_.isArray(arg1)) {\n      AV.GeoPoint._validate(arg1[0], arg1[1]);\n      this.latitude = arg1[0];\n      this.longitude = arg1[1];\n    } else if (_.isObject(arg1)) {\n      AV.GeoPoint._validate(arg1.latitude, arg1.longitude);\n      this.latitude = arg1.latitude;\n      this.longitude = arg1.longitude;\n    } else if (_.isNumber(arg1) && _.isNumber(arg2)) {\n      AV.GeoPoint._validate(arg1, arg2);\n      this.latitude = arg1;\n      this.longitude = arg2;\n    } else {\n      this.latitude = 0;\n      this.longitude = 0;\n    }\n\n    // Add properties so that anyone using Webkit or Mozilla will get an error\n    // if they try to set values that are out of bounds.\n    var self = this;\n    if (this.__defineGetter__ && this.__defineSetter__) {\n      // Use _latitude and _longitude to actually store the values, and add\n      // getters and setters for latitude and longitude.\n      this._latitude = this.latitude;\n      this._longitude = this.longitude;\n      this.__defineGetter__('latitude', function () {\n        return self._latitude;\n      });\n      this.__defineGetter__('longitude', function () {\n        return self._longitude;\n      });\n      this.__defineSetter__('latitude', function (val) {\n        AV.GeoPoint._validate(val, self.longitude);\n        self._latitude = val;\n      });\n      this.__defineSetter__('longitude', function (val) {\n        AV.GeoPoint._validate(self.latitude, val);\n        self._longitude = val;\n      });\n    }\n  };\n\n  /**\n   * @lends AV.GeoPoint.prototype\n   * @property {float} latitude North-south portion of the coordinate, in range\n   *   [-90, 90].  Throws an exception if set out of range in a modern browser.\n   * @property {float} longitude East-west portion of the coordinate, in range\n   *   [-180, 180].  Throws if set out of range in a modern browser.\n   */\n\n  /**\n   * Throws an exception if the given lat-long is out of bounds.\n   * @private\n   */\n  AV.GeoPoint._validate = function (latitude, longitude) {\n    if (latitude < -90.0) {\n      throw new Error('AV.GeoPoint latitude ' + latitude + ' < -90.0.');\n    }\n    if (latitude > 90.0) {\n      throw new Error('AV.GeoPoint latitude ' + latitude + ' > 90.0.');\n    }\n    if (longitude < -180.0) {\n      throw new Error('AV.GeoPoint longitude ' + longitude + ' < -180.0.');\n    }\n    if (longitude > 180.0) {\n      throw new Error('AV.GeoPoint longitude ' + longitude + ' > 180.0.');\n    }\n  };\n\n  /**\n   * Creates a GeoPoint with the user's current location, if available.\n   * @return {Promise.<AV.GeoPoint>}\n   */\n  AV.GeoPoint.current = function () {\n    return new Promise(function (resolve, reject) {\n      navigator.geolocation.getCurrentPosition(function (location) {\n        resolve(new AV.GeoPoint({\n          latitude: location.coords.latitude,\n          longitude: location.coords.longitude\n        }));\n      }, reject);\n    });\n  };\n\n  _.extend(AV.GeoPoint.prototype,\n  /** @lends AV.GeoPoint.prototype */{\n    /**\n     * Returns a JSON representation of the GeoPoint, suitable for AV.\n     * @return {Object}\n     */\n    toJSON: function toJSON() {\n      AV.GeoPoint._validate(this.latitude, this.longitude);\n      return {\n        __type: 'GeoPoint',\n        latitude: this.latitude,\n        longitude: this.longitude\n      };\n    },\n\n    /**\n     * Returns the distance from this GeoPoint to another in radians.\n     * @param {AV.GeoPoint} point the other AV.GeoPoint.\n     * @return {Number}\n     */\n    radiansTo: function radiansTo(point) {\n      var d2r = Math.PI / 180.0;\n      var lat1rad = this.latitude * d2r;\n      var long1rad = this.longitude * d2r;\n      var lat2rad = point.latitude * d2r;\n      var long2rad = point.longitude * d2r;\n      var deltaLat = lat1rad - lat2rad;\n      var deltaLong = long1rad - long2rad;\n      var sinDeltaLatDiv2 = Math.sin(deltaLat / 2);\n      var sinDeltaLongDiv2 = Math.sin(deltaLong / 2);\n      // Square of half the straight line chord distance between both points.\n      var a = sinDeltaLatDiv2 * sinDeltaLatDiv2 + Math.cos(lat1rad) * Math.cos(lat2rad) * sinDeltaLongDiv2 * sinDeltaLongDiv2;\n      a = Math.min(1.0, a);\n      return 2 * Math.asin(Math.sqrt(a));\n    },\n\n    /**\n     * Returns the distance from this GeoPoint to another in kilometers.\n     * @param {AV.GeoPoint} point the other AV.GeoPoint.\n     * @return {Number}\n     */\n    kilometersTo: function kilometersTo(point) {\n      return this.radiansTo(point) * 6371.0;\n    },\n\n    /**\n     * Returns the distance from this GeoPoint to another in miles.\n     * @param {AV.GeoPoint} point the other AV.GeoPoint.\n     * @return {Number}\n     */\n    milesTo: function milesTo(point) {\n      return this.radiansTo(point) * 3958.8;\n    }\n  });\n};","map":{"mappings":[{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/leancloud-storage/dist/node/geopoint.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}}],"sources":{"node_modules/leancloud-storage/dist/node/geopoint.js":"'use strict';\n\nvar _ = require('underscore');\nvar Promise = require('./promise');\n\n/*global navigator: false */\nmodule.exports = function (AV) {\n  /**\n   * Creates a new GeoPoint with any of the following forms:<br>\n   * @example\n   * new GeoPoint(otherGeoPoint)\n   * new GeoPoint(30, 30)\n   * new GeoPoint([30, 30])\n   * new GeoPoint({latitude: 30, longitude: 30})\n   * new GeoPoint()  // defaults to (0, 0)\n   * @class\n   *\n   * <p>Represents a latitude / longitude point that may be associated\n   * with a key in a AVObject or used as a reference point for geo queries.\n   * This allows proximity-based queries on the key.</p>\n   *\n   * <p>Only one key in a class may contain a GeoPoint.</p>\n   *\n   * <p>Example:<pre>\n   *   var point = new AV.GeoPoint(30.0, -20.0);\n   *   var object = new AV.Object(\"PlaceObject\");\n   *   object.set(\"location\", point);\n   *   object.save();</pre></p>\n   */\n  AV.GeoPoint = function (arg1, arg2) {\n    if (_.isArray(arg1)) {\n      AV.GeoPoint._validate(arg1[0], arg1[1]);\n      this.latitude = arg1[0];\n      this.longitude = arg1[1];\n    } else if (_.isObject(arg1)) {\n      AV.GeoPoint._validate(arg1.latitude, arg1.longitude);\n      this.latitude = arg1.latitude;\n      this.longitude = arg1.longitude;\n    } else if (_.isNumber(arg1) && _.isNumber(arg2)) {\n      AV.GeoPoint._validate(arg1, arg2);\n      this.latitude = arg1;\n      this.longitude = arg2;\n    } else {\n      this.latitude = 0;\n      this.longitude = 0;\n    }\n\n    // Add properties so that anyone using Webkit or Mozilla will get an error\n    // if they try to set values that are out of bounds.\n    var self = this;\n    if (this.__defineGetter__ && this.__defineSetter__) {\n      // Use _latitude and _longitude to actually store the values, and add\n      // getters and setters for latitude and longitude.\n      this._latitude = this.latitude;\n      this._longitude = this.longitude;\n      this.__defineGetter__('latitude', function () {\n        return self._latitude;\n      });\n      this.__defineGetter__('longitude', function () {\n        return self._longitude;\n      });\n      this.__defineSetter__('latitude', function (val) {\n        AV.GeoPoint._validate(val, self.longitude);\n        self._latitude = val;\n      });\n      this.__defineSetter__('longitude', function (val) {\n        AV.GeoPoint._validate(self.latitude, val);\n        self._longitude = val;\n      });\n    }\n  };\n\n  /**\n   * @lends AV.GeoPoint.prototype\n   * @property {float} latitude North-south portion of the coordinate, in range\n   *   [-90, 90].  Throws an exception if set out of range in a modern browser.\n   * @property {float} longitude East-west portion of the coordinate, in range\n   *   [-180, 180].  Throws if set out of range in a modern browser.\n   */\n\n  /**\n   * Throws an exception if the given lat-long is out of bounds.\n   * @private\n   */\n  AV.GeoPoint._validate = function (latitude, longitude) {\n    if (latitude < -90.0) {\n      throw new Error('AV.GeoPoint latitude ' + latitude + ' < -90.0.');\n    }\n    if (latitude > 90.0) {\n      throw new Error('AV.GeoPoint latitude ' + latitude + ' > 90.0.');\n    }\n    if (longitude < -180.0) {\n      throw new Error('AV.GeoPoint longitude ' + longitude + ' < -180.0.');\n    }\n    if (longitude > 180.0) {\n      throw new Error('AV.GeoPoint longitude ' + longitude + ' > 180.0.');\n    }\n  };\n\n  /**\n   * Creates a GeoPoint with the user's current location, if available.\n   * @return {Promise.<AV.GeoPoint>}\n   */\n  AV.GeoPoint.current = function () {\n    return new Promise(function (resolve, reject) {\n      navigator.geolocation.getCurrentPosition(function (location) {\n        resolve(new AV.GeoPoint({\n          latitude: location.coords.latitude,\n          longitude: location.coords.longitude\n        }));\n      }, reject);\n    });\n  };\n\n  _.extend(AV.GeoPoint.prototype,\n  /** @lends AV.GeoPoint.prototype */{\n    /**\n     * Returns a JSON representation of the GeoPoint, suitable for AV.\n     * @return {Object}\n     */\n    toJSON: function toJSON() {\n      AV.GeoPoint._validate(this.latitude, this.longitude);\n      return {\n        __type: 'GeoPoint',\n        latitude: this.latitude,\n        longitude: this.longitude\n      };\n    },\n\n    /**\n     * Returns the distance from this GeoPoint to another in radians.\n     * @param {AV.GeoPoint} point the other AV.GeoPoint.\n     * @return {Number}\n     */\n    radiansTo: function radiansTo(point) {\n      var d2r = Math.PI / 180.0;\n      var lat1rad = this.latitude * d2r;\n      var long1rad = this.longitude * d2r;\n      var lat2rad = point.latitude * d2r;\n      var long2rad = point.longitude * d2r;\n      var deltaLat = lat1rad - lat2rad;\n      var deltaLong = long1rad - long2rad;\n      var sinDeltaLatDiv2 = Math.sin(deltaLat / 2);\n      var sinDeltaLongDiv2 = Math.sin(deltaLong / 2);\n      // Square of half the straight line chord distance between both points.\n      var a = sinDeltaLatDiv2 * sinDeltaLatDiv2 + Math.cos(lat1rad) * Math.cos(lat2rad) * sinDeltaLongDiv2 * sinDeltaLongDiv2;\n      a = Math.min(1.0, a);\n      return 2 * Math.asin(Math.sqrt(a));\n    },\n\n    /**\n     * Returns the distance from this GeoPoint to another in kilometers.\n     * @param {AV.GeoPoint} point the other AV.GeoPoint.\n     * @return {Number}\n     */\n    kilometersTo: function kilometersTo(point) {\n      return this.radiansTo(point) * 6371.0;\n    },\n\n    /**\n     * Returns the distance from this GeoPoint to another in miles.\n     * @param {AV.GeoPoint} point the other AV.GeoPoint.\n     * @return {Number}\n     */\n    milesTo: function milesTo(point) {\n      return this.radiansTo(point) * 3958.8;\n    }\n  });\n};"},"lineCount":169}},"hash":"89a91a0aaccc53e689e54d74f48aa1fb","cacheData":{"env":{}}}